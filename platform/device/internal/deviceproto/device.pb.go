// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

package deviceproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Device struct {
	Uuid                   string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Udid                   string   `protobuf:"bytes,2,opt,name=udid,proto3" json:"udid,omitempty"`
	SerialNumber           string   `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	OsVersion              string   `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	BuildVersion           string   `protobuf:"bytes,5,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	ProductName            string   `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Imei                   string   `protobuf:"bytes,7,opt,name=imei,proto3" json:"imei,omitempty"`
	Meid                   string   `protobuf:"bytes,8,opt,name=meid,proto3" json:"meid,omitempty"`
	Token                  string   `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	PushMagic              string   `protobuf:"bytes,10,opt,name=push_magic,json=pushMagic,proto3" json:"push_magic,omitempty"`
	MdmTopic               string   `protobuf:"bytes,11,opt,name=mdm_topic,json=mdmTopic,proto3" json:"mdm_topic,omitempty"`
	UnlockToken            string   `protobuf:"bytes,12,opt,name=unlock_token,json=unlockToken,proto3" json:"unlock_token,omitempty"`
	Enrolled               bool     `protobuf:"varint,13,opt,name=enrolled,proto3" json:"enrolled,omitempty"`
	AwaitingConfiguration  bool     `protobuf:"varint,14,opt,name=awaiting_configuration,json=awaitingConfiguration,proto3" json:"awaiting_configuration,omitempty"`
	DeviceName             string   `protobuf:"bytes,15,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Model                  string   `protobuf:"bytes,16,opt,name=model,proto3" json:"model,omitempty"`
	ModelName              string   `protobuf:"bytes,17,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Description            string   `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Color                  string   `protobuf:"bytes,19,opt,name=color,proto3" json:"color,omitempty"`
	AssetTag               string   `protobuf:"bytes,20,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	DepDevice              bool     `protobuf:"varint,21,opt,name=dep_device,json=depDevice,proto3" json:"dep_device,omitempty"`
	DepProfileStatus       string   `protobuf:"bytes,22,opt,name=dep_profile_status,json=depProfileStatus,proto3" json:"dep_profile_status,omitempty"`
	DepProfileUuid         string   `protobuf:"bytes,23,opt,name=dep_profile_uuid,json=depProfileUuid,proto3" json:"dep_profile_uuid,omitempty"`
	DepProfileAssignTime   int64    `protobuf:"varint,24,opt,name=dep_profile_assign_time,json=depProfileAssignTime,proto3" json:"dep_profile_assign_time,omitempty"`
	DepProfilePushTime     int64    `protobuf:"varint,25,opt,name=dep_profile_push_time,json=depProfilePushTime,proto3" json:"dep_profile_push_time,omitempty"`
	DepProfileAssignedDate int64    `protobuf:"varint,26,opt,name=dep_profile_assigned_date,json=depProfileAssignedDate,proto3" json:"dep_profile_assigned_date,omitempty"`
	DepProfileAssignedBy   string   `protobuf:"bytes,27,opt,name=dep_profile_assigned_by,json=depProfileAssignedBy,proto3" json:"dep_profile_assigned_by,omitempty"`
	LastSeen               int64    `protobuf:"varint,28,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	LastQueryResponse      []byte   `protobuf:"bytes,29,opt,name=last_query_response,json=lastQueryResponse,proto3" json:"last_query_response,omitempty"`
	BootstrapToken         string   `protobuf:"bytes,30,opt,name=bootstrap_token,json=bootstrapToken,proto3" json:"bootstrap_token,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *Device) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Device) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

func (m *Device) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Device) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *Device) GetMeid() string {
	if m != nil {
		return m.Meid
	}
	return ""
}

func (m *Device) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Device) GetPushMagic() string {
	if m != nil {
		return m.PushMagic
	}
	return ""
}

func (m *Device) GetMdmTopic() string {
	if m != nil {
		return m.MdmTopic
	}
	return ""
}

func (m *Device) GetUnlockToken() string {
	if m != nil {
		return m.UnlockToken
	}
	return ""
}

func (m *Device) GetEnrolled() bool {
	if m != nil {
		return m.Enrolled
	}
	return false
}

func (m *Device) GetAwaitingConfiguration() bool {
	if m != nil {
		return m.AwaitingConfiguration
	}
	return false
}

func (m *Device) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Device) GetAssetTag() string {
	if m != nil {
		return m.AssetTag
	}
	return ""
}

func (m *Device) GetDepDevice() bool {
	if m != nil {
		return m.DepDevice
	}
	return false
}

func (m *Device) GetDepProfileStatus() string {
	if m != nil {
		return m.DepProfileStatus
	}
	return ""
}

func (m *Device) GetDepProfileUuid() string {
	if m != nil {
		return m.DepProfileUuid
	}
	return ""
}

func (m *Device) GetDepProfileAssignTime() int64 {
	if m != nil {
		return m.DepProfileAssignTime
	}
	return 0
}

func (m *Device) GetDepProfilePushTime() int64 {
	if m != nil {
		return m.DepProfilePushTime
	}
	return 0
}

func (m *Device) GetDepProfileAssignedDate() int64 {
	if m != nil {
		return m.DepProfileAssignedDate
	}
	return 0
}

func (m *Device) GetDepProfileAssignedBy() string {
	if m != nil {
		return m.DepProfileAssignedBy
	}
	return ""
}

func (m *Device) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Device) GetLastQueryResponse() []byte {
	if m != nil {
		return m.LastQueryResponse
	}
	return nil
}

func (m *Device) GetBootstrapToken() string {
	if m != nil {
		return m.BootstrapToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Device)(nil), "deviceproto.Device")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcd, 0x52, 0x14, 0x31,
	0x10, 0xc7, 0x1d, 0xf9, 0x70, 0x36, 0x2c, 0xb0, 0x84, 0x05, 0x02, 0xc8, 0xba, 0xea, 0xc1, 0x3d,
	0x58, 0x54, 0x59, 0x16, 0x07, 0x8f, 0x22, 0x57, 0x29, 0x5c, 0x56, 0xaf, 0xa9, 0xec, 0xa4, 0x19,
	0x52, 0x4c, 0x92, 0x31, 0xc9, 0x60, 0xf1, 0x26, 0x1e, 0x7d, 0x1c, 0x8f, 0x3e, 0x82, 0x85, 0x2f,
	0x62, 0xa5, 0x33, 0xb0, 0x5b, 0xe2, 0x2d, 0xfd, 0xfb, 0xf7, 0xf7, 0x74, 0x0d, 0xe9, 0x4a, 0xb8,
	0x56, 0x05, 0x1c, 0xd6, 0xce, 0x06, 0x4b, 0x57, 0x92, 0x85, 0xc6, 0x8b, 0x1f, 0x39, 0x59, 0x3e,
	0x41, 0x9b, 0x52, 0xb2, 0xd8, 0x34, 0x4a, 0xb2, 0x6c, 0x98, 0x8d, 0x3a, 0x63, 0x7c, 0x23, 0x93,
	0x4a, 0xb2, 0xc7, 0x2d, 0x93, 0x4a, 0xd2, 0x97, 0x64, 0xd5, 0x83, 0x53, 0xa2, 0xe2, 0xa6, 0xd1,
	0x53, 0x70, 0x6c, 0x01, 0xc5, 0x6e, 0x82, 0xa7, 0xc8, 0xe8, 0x01, 0x21, 0xd6, 0xf3, 0x6b, 0x70,
	0x5e, 0x59, 0xc3, 0x16, 0xd1, 0xa3, 0x63, 0xfd, 0x97, 0x04, 0x62, 0x8e, 0x69, 0xa3, 0x2a, 0x79,
	0xef, 0xb1, 0x94, 0x72, 0x20, 0xbc, 0x73, 0x7a, 0x4e, 0xba, 0xb5, 0xb3, 0xb2, 0x29, 0x02, 0x37,
	0x42, 0x03, 0x5b, 0x46, 0x9f, 0x95, 0x96, 0x9d, 0x0a, 0x8d, 0x3d, 0x2b, 0x0d, 0x8a, 0x3d, 0x49,
	0xfd, 0xc5, 0x77, 0x64, 0x1a, 0x94, 0x64, 0x79, 0x62, 0xf1, 0x4d, 0xfb, 0x64, 0x29, 0xd8, 0x2b,
	0x30, 0xac, 0x83, 0x30, 0x19, 0xb1, 0xc9, 0xba, 0xf1, 0x97, 0x5c, 0x8b, 0x52, 0x15, 0x8c, 0xa4,
	0x26, 0x23, 0xf9, 0x18, 0x01, 0xdd, 0x27, 0x1d, 0x2d, 0x35, 0x0f, 0xb6, 0x56, 0x05, 0x5b, 0x41,
	0x35, 0xd7, 0x52, 0x4f, 0xa2, 0x1d, 0x9b, 0x6b, 0x4c, 0x65, 0x8b, 0x2b, 0x9e, 0x12, 0x77, 0x53,
	0x73, 0x89, 0x4d, 0x30, 0xfd, 0x1e, 0xc9, 0xc1, 0x38, 0x5b, 0x55, 0x20, 0xd9, 0xea, 0x30, 0x1b,
	0xe5, 0xe3, 0x7b, 0x9b, 0x1e, 0x91, 0x6d, 0xf1, 0x4d, 0xa8, 0xa0, 0x4c, 0xc9, 0x0b, 0x6b, 0x2e,
	0x54, 0xd9, 0x38, 0x11, 0xe2, 0x26, 0xd6, 0xd0, 0x73, 0xeb, 0x4e, 0xfd, 0x30, 0x2f, 0xd2, 0x67,
	0xa4, 0xfd, 0x7a, 0x69, 0x23, 0xeb, 0x58, 0x94, 0x24, 0x84, 0x0b, 0xe9, 0x93, 0x25, 0x6d, 0x25,
	0x54, 0xac, 0x97, 0x06, 0x45, 0x23, 0x0e, 0x8a, 0x8f, 0x14, 0xb5, 0x91, 0x06, 0x45, 0x82, 0x41,
	0xc3, 0x98, 0xd5, 0x17, 0x4e, 0xd5, 0xd8, 0x01, 0x4d, 0xa3, 0xcc, 0xa1, 0x98, 0xb6, 0xb0, 0x95,
	0x75, 0x6c, 0x33, 0xa5, 0x45, 0x23, 0x2e, 0x48, 0x78, 0x0f, 0x81, 0x07, 0x51, 0xb2, 0x7e, 0x5a,
	0x10, 0x82, 0x89, 0x28, 0x63, 0x4d, 0x09, 0x35, 0x4f, 0xbd, 0xb1, 0x2d, 0x9c, 0xaa, 0x23, 0xa1,
	0x6e, 0xaf, 0xed, 0x35, 0xa1, 0x51, 0xae, 0x9d, 0xbd, 0x50, 0x15, 0x70, 0x1f, 0x44, 0x68, 0x3c,
	0xdb, 0xc6, 0x24, 0x3d, 0x09, 0xf5, 0x59, 0x12, 0xce, 0x91, 0xd3, 0x11, 0xe9, 0xcd, 0x7b, 0xe3,
	0x9d, 0xee, 0xa0, 0xef, 0xda, 0xcc, 0xf7, 0x73, 0xbc, 0xd8, 0x23, 0xb2, 0x33, 0xef, 0x29, 0xbc,
	0x57, 0xa5, 0xe1, 0x41, 0x69, 0x60, 0x6c, 0x98, 0x8d, 0x16, 0xc6, 0xfd, 0x59, 0xc0, 0x7b, 0x14,
	0x27, 0x4a, 0x03, 0x7d, 0x43, 0xb6, 0xe6, 0xc3, 0xf0, 0x2c, 0x30, 0x68, 0x17, 0x83, 0xe8, 0x2c,
	0xe8, 0xac, 0xf1, 0x97, 0x18, 0xf2, 0x8e, 0xec, 0x3e, 0xac, 0x04, 0x92, 0x4b, 0x11, 0x80, 0xed,
	0x61, 0xd8, 0xf6, 0xbf, 0xb5, 0x40, 0x9e, 0x88, 0x00, 0xff, 0x6f, 0x12, 0x24, 0x9f, 0xde, 0xb0,
	0x7d, 0x9c, 0xaa, 0xff, 0x30, 0xf0, 0xf8, 0x26, 0xee, 0xbb, 0x12, 0x3e, 0x70, 0x0f, 0x60, 0xd8,
	0x53, 0xac, 0x90, 0x47, 0x70, 0x0e, 0x60, 0xe8, 0x21, 0xd9, 0x44, 0xf1, 0x6b, 0x03, 0xee, 0x86,
	0x3b, 0xf0, 0xb5, 0x35, 0x1e, 0xd8, 0xc1, 0x30, 0x1b, 0x75, 0xc7, 0x1b, 0x51, 0xfa, 0x14, 0x95,
	0x71, 0x2b, 0xd0, 0x57, 0x64, 0x7d, 0x6a, 0x6d, 0xf0, 0xc1, 0x89, 0xba, 0xbd, 0xe1, 0x41, 0xda,
	0xe8, 0x3d, 0xc6, 0x33, 0x3e, 0xee, 0xfd, 0xbc, 0x1d, 0x64, 0xbf, 0x6e, 0x07, 0xd9, 0xef, 0xdb,
	0x41, 0xf6, 0xfd, 0xcf, 0xe0, 0xd1, 0x74, 0x19, 0xff, 0x1d, 0x6f, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x96, 0xfd, 0xc7, 0x8b, 0x58, 0x04, 0x00, 0x00,
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BootstrapToken) > 0 {
		i -= len(m.BootstrapToken)
		copy(dAtA[i:], m.BootstrapToken)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.BootstrapToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.LastQueryResponse) > 0 {
		i -= len(m.LastQueryResponse)
		copy(dAtA[i:], m.LastQueryResponse)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.LastQueryResponse)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.LastSeen != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.LastSeen))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.DepProfileAssignedBy) > 0 {
		i -= len(m.DepProfileAssignedBy)
		copy(dAtA[i:], m.DepProfileAssignedBy)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DepProfileAssignedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.DepProfileAssignedDate != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.DepProfileAssignedDate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.DepProfilePushTime != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.DepProfilePushTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.DepProfileAssignTime != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.DepProfileAssignTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.DepProfileUuid) > 0 {
		i -= len(m.DepProfileUuid)
		copy(dAtA[i:], m.DepProfileUuid)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DepProfileUuid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.DepProfileStatus) > 0 {
		i -= len(m.DepProfileStatus)
		copy(dAtA[i:], m.DepProfileStatus)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DepProfileStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.DepDevice {
		i--
		if m.DepDevice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.AssetTag) > 0 {
		i -= len(m.AssetTag)
		copy(dAtA[i:], m.AssetTag)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AssetTag)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x7a
	}
	if m.AwaitingConfiguration {
		i--
		if m.AwaitingConfiguration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Enrolled {
		i--
		if m.Enrolled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.UnlockToken) > 0 {
		i -= len(m.UnlockToken)
		copy(dAtA[i:], m.UnlockToken)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.UnlockToken)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MdmTopic) > 0 {
		i -= len(m.MdmTopic)
		copy(dAtA[i:], m.MdmTopic)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.MdmTopic)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PushMagic) > 0 {
		i -= len(m.PushMagic)
		copy(dAtA[i:], m.PushMagic)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.PushMagic)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Meid) > 0 {
		i -= len(m.Meid)
		copy(dAtA[i:], m.Meid)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Meid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BuildVersion) > 0 {
		i -= len(m.BuildVersion)
		copy(dAtA[i:], m.BuildVersion)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.BuildVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OsVersion) > 0 {
		i -= len(m.OsVersion)
		copy(dAtA[i:], m.OsVersion)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.OsVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Udid) > 0 {
		i -= len(m.Udid)
		copy(dAtA[i:], m.Udid)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Udid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.BuildVersion)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Meid)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.PushMagic)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.MdmTopic)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.UnlockToken)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.Enrolled {
		n += 2
	}
	if m.AwaitingConfiguration {
		n += 2
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.AssetTag)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.DepDevice {
		n += 3
	}
	l = len(m.DepProfileStatus)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.DepProfileUuid)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.DepProfileAssignTime != 0 {
		n += 2 + sovDevice(uint64(m.DepProfileAssignTime))
	}
	if m.DepProfilePushTime != 0 {
		n += 2 + sovDevice(uint64(m.DepProfilePushTime))
	}
	if m.DepProfileAssignedDate != 0 {
		n += 2 + sovDevice(uint64(m.DepProfileAssignedDate))
	}
	l = len(m.DepProfileAssignedBy)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.LastSeen != 0 {
		n += 2 + sovDevice(uint64(m.LastSeen))
	}
	l = len(m.LastQueryResponse)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.BootstrapToken)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushMagic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushMagic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdmTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdmTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrolled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enrolled = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitingConfiguration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitingConfiguration = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepDevice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepDevice = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfileStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepProfileStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfileUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepProfileUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfileAssignTime", wireType)
			}
			m.DepProfileAssignTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepProfileAssignTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfilePushTime", wireType)
			}
			m.DepProfilePushTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepProfilePushTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfileAssignedDate", wireType)
			}
			m.DepProfileAssignedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepProfileAssignedDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepProfileAssignedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepProfileAssignedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQueryResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastQueryResponse = append(m.LastQueryResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.LastQueryResponse == nil {
				m.LastQueryResponse = []byte{}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevice = fmt.Errorf("proto: unexpected end of group")
)
