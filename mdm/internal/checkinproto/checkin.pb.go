// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkin.proto

package checkinproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                 int64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Command              *Command          `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Raw                  []byte            `protobuf:"bytes,4,opt,name=raw,proto3" json:"raw,omitempty"`
	Params               map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Event) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Event) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Command struct {
	MessageType          string             `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Topic                string             `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Udid                 string             `protobuf:"bytes,3,opt,name=udid,proto3" json:"udid,omitempty"`
	Authenticate         *Authenticate      `protobuf:"bytes,4,opt,name=authenticate,proto3" json:"authenticate,omitempty"`
	TokenUpdate          *TokenUpdate       `protobuf:"bytes,5,opt,name=token_update,json=tokenUpdate,proto3" json:"token_update,omitempty"`
	EnrollmentId         string             `protobuf:"bytes,6,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
	GetBootstrapToken    *GetBootstrapToken `protobuf:"bytes,7,opt,name=get_bootstrap_token,json=getBootstrapToken,proto3" json:"get_bootstrap_token,omitempty"`
	SetBootstrapToken    *SetBootstrapToken `protobuf:"bytes,8,opt,name=set_bootstrap_token,json=setBootstrapToken,proto3" json:"set_bootstrap_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{1}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *Command) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Command) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *Command) GetAuthenticate() *Authenticate {
	if m != nil {
		return m.Authenticate
	}
	return nil
}

func (m *Command) GetTokenUpdate() *TokenUpdate {
	if m != nil {
		return m.TokenUpdate
	}
	return nil
}

func (m *Command) GetEnrollmentId() string {
	if m != nil {
		return m.EnrollmentId
	}
	return ""
}

func (m *Command) GetGetBootstrapToken() *GetBootstrapToken {
	if m != nil {
		return m.GetBootstrapToken
	}
	return nil
}

func (m *Command) GetSetBootstrapToken() *SetBootstrapToken {
	if m != nil {
		return m.SetBootstrapToken
	}
	return nil
}

type Authenticate struct {
	OsVersion            string   `protobuf:"bytes,1,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	BuildVersion         string   `protobuf:"bytes,2,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	ProductName          string   `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	SerialNumber         string   `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Imei                 string   `protobuf:"bytes,5,opt,name=imei,proto3" json:"imei,omitempty"`
	Meid                 string   `protobuf:"bytes,6,opt,name=meid,proto3" json:"meid,omitempty"`
	DeviceName           string   `protobuf:"bytes,7,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Challenge            []byte   `protobuf:"bytes,8,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Model                string   `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	ModelName            string   `protobuf:"bytes,10,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Authenticate) Reset()         { *m = Authenticate{} }
func (m *Authenticate) String() string { return proto.CompactTextString(m) }
func (*Authenticate) ProtoMessage()    {}
func (*Authenticate) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{2}
}
func (m *Authenticate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authenticate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authenticate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Authenticate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authenticate.Merge(m, src)
}
func (m *Authenticate) XXX_Size() int {
	return m.Size()
}
func (m *Authenticate) XXX_DiscardUnknown() {
	xxx_messageInfo_Authenticate.DiscardUnknown(m)
}

var xxx_messageInfo_Authenticate proto.InternalMessageInfo

func (m *Authenticate) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *Authenticate) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

func (m *Authenticate) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Authenticate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Authenticate) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *Authenticate) GetMeid() string {
	if m != nil {
		return m.Meid
	}
	return ""
}

func (m *Authenticate) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Authenticate) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *Authenticate) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Authenticate) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type TokenUpdate struct {
	Token                 []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PushMagic             string   `protobuf:"bytes,2,opt,name=push_magic,json=pushMagic,proto3" json:"push_magic,omitempty"`
	UnlockToken           []byte   `protobuf:"bytes,3,opt,name=unlock_token,json=unlockToken,proto3" json:"unlock_token,omitempty"`
	AwaitingConfiguration bool     `protobuf:"varint,4,opt,name=awaiting_configuration,json=awaitingConfiguration,proto3" json:"awaiting_configuration,omitempty"`
	UserId                string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLongName          string   `protobuf:"bytes,6,opt,name=user_long_name,json=userLongName,proto3" json:"user_long_name,omitempty"`
	UserShortName         string   `protobuf:"bytes,7,opt,name=user_short_name,json=userShortName,proto3" json:"user_short_name,omitempty"`
	NotOnConsole          bool     `protobuf:"varint,8,opt,name=not_on_console,json=notOnConsole,proto3" json:"not_on_console,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TokenUpdate) Reset()         { *m = TokenUpdate{} }
func (m *TokenUpdate) String() string { return proto.CompactTextString(m) }
func (*TokenUpdate) ProtoMessage()    {}
func (*TokenUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{3}
}
func (m *TokenUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenUpdate.Merge(m, src)
}
func (m *TokenUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TokenUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TokenUpdate proto.InternalMessageInfo

func (m *TokenUpdate) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TokenUpdate) GetPushMagic() string {
	if m != nil {
		return m.PushMagic
	}
	return ""
}

func (m *TokenUpdate) GetUnlockToken() []byte {
	if m != nil {
		return m.UnlockToken
	}
	return nil
}

func (m *TokenUpdate) GetAwaitingConfiguration() bool {
	if m != nil {
		return m.AwaitingConfiguration
	}
	return false
}

func (m *TokenUpdate) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TokenUpdate) GetUserLongName() string {
	if m != nil {
		return m.UserLongName
	}
	return ""
}

func (m *TokenUpdate) GetUserShortName() string {
	if m != nil {
		return m.UserShortName
	}
	return ""
}

func (m *TokenUpdate) GetNotOnConsole() bool {
	if m != nil {
		return m.NotOnConsole
	}
	return false
}

type GetBootstrapToken struct {
	GAwaitingConfiguration bool     `protobuf:"varint,1,opt,name=g_awaiting_configuration,json=gAwaitingConfiguration,proto3" json:"g_awaiting_configuration,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetBootstrapToken) Reset()         { *m = GetBootstrapToken{} }
func (m *GetBootstrapToken) String() string { return proto.CompactTextString(m) }
func (*GetBootstrapToken) ProtoMessage()    {}
func (*GetBootstrapToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{4}
}
func (m *GetBootstrapToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBootstrapToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBootstrapToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBootstrapToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBootstrapToken.Merge(m, src)
}
func (m *GetBootstrapToken) XXX_Size() int {
	return m.Size()
}
func (m *GetBootstrapToken) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBootstrapToken.DiscardUnknown(m)
}

var xxx_messageInfo_GetBootstrapToken proto.InternalMessageInfo

func (m *GetBootstrapToken) GetGAwaitingConfiguration() bool {
	if m != nil {
		return m.GAwaitingConfiguration
	}
	return false
}

type SetBootstrapToken struct {
	BootstrapToken         []byte   `protobuf:"bytes,1,opt,name=bootstrap_token,json=bootstrapToken,proto3" json:"bootstrap_token,omitempty"`
	SAwaitingConfiguration bool     `protobuf:"varint,2,opt,name=s_awaiting_configuration,json=sAwaitingConfiguration,proto3" json:"s_awaiting_configuration,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *SetBootstrapToken) Reset()         { *m = SetBootstrapToken{} }
func (m *SetBootstrapToken) String() string { return proto.CompactTextString(m) }
func (*SetBootstrapToken) ProtoMessage()    {}
func (*SetBootstrapToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_072e71e6019dc001, []int{5}
}
func (m *SetBootstrapToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBootstrapToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBootstrapToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBootstrapToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBootstrapToken.Merge(m, src)
}
func (m *SetBootstrapToken) XXX_Size() int {
	return m.Size()
}
func (m *SetBootstrapToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBootstrapToken.DiscardUnknown(m)
}

var xxx_messageInfo_SetBootstrapToken proto.InternalMessageInfo

func (m *SetBootstrapToken) GetBootstrapToken() []byte {
	if m != nil {
		return m.BootstrapToken
	}
	return nil
}

func (m *SetBootstrapToken) GetSAwaitingConfiguration() bool {
	if m != nil {
		return m.SAwaitingConfiguration
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "checkinproto.Event")
	proto.RegisterMapType((map[string]string)(nil), "checkinproto.Event.ParamsEntry")
	proto.RegisterType((*Command)(nil), "checkinproto.Command")
	proto.RegisterType((*Authenticate)(nil), "checkinproto.Authenticate")
	proto.RegisterType((*TokenUpdate)(nil), "checkinproto.TokenUpdate")
	proto.RegisterType((*GetBootstrapToken)(nil), "checkinproto.GetBootstrapToken")
	proto.RegisterType((*SetBootstrapToken)(nil), "checkinproto.SetBootstrapToken")
}

func init() { proto.RegisterFile("checkin.proto", fileDescriptor_072e71e6019dc001) }

var fileDescriptor_072e71e6019dc001 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x6e, 0xeb, 0x44,
	0x10, 0xc6, 0xc9, 0x49, 0x52, 0x8f, 0xdd, 0x9c, 0xd3, 0x85, 0x73, 0x30, 0x15, 0xa4, 0x69, 0xa8,
	0x20, 0x57, 0x41, 0x2a, 0x42, 0x14, 0x84, 0x90, 0xda, 0xaa, 0x42, 0x95, 0x68, 0x8b, 0xdc, 0xc2,
	0xad, 0xb5, 0xb1, 0x17, 0x67, 0x15, 0x7b, 0xd7, 0xf2, 0xae, 0x53, 0xe5, 0x4d, 0x90, 0x78, 0x02,
	0x5e, 0x80, 0x67, 0xe0, 0x92, 0x47, 0x40, 0xe1, 0x45, 0x8e, 0x76, 0xd6, 0x69, 0xf3, 0xd7, 0xbb,
	0x99, 0x6f, 0x3f, 0x7f, 0x33, 0xf3, 0xcd, 0x18, 0xf6, 0xe3, 0x09, 0x8b, 0xa7, 0x5c, 0x8c, 0x8a,
	0x52, 0x6a, 0x49, 0xfc, 0x3a, 0xc5, 0x6c, 0xb0, 0x70, 0xa0, 0x75, 0x35, 0x63, 0x42, 0x93, 0x2e,
	0x34, 0x78, 0x12, 0x38, 0x7d, 0x67, 0xe8, 0x86, 0x0d, 0x9e, 0x10, 0x02, 0xaf, 0x34, 0xcf, 0x59,
	0xd0, 0xe8, 0x3b, 0xc3, 0x66, 0x88, 0x31, 0xf9, 0x0a, 0x3a, 0xb1, 0xcc, 0x73, 0x2a, 0x92, 0xa0,
	0xd9, 0x77, 0x86, 0xde, 0xe9, 0xdb, 0xd1, 0xaa, 0xda, 0xe8, 0xd2, 0x3e, 0x86, 0x4b, 0x16, 0x79,
	0x03, 0xcd, 0x92, 0x3e, 0x06, 0xaf, 0xfa, 0xce, 0xd0, 0x0f, 0x4d, 0x48, 0xbe, 0x85, 0x76, 0x41,
	0x4b, 0x9a, 0xab, 0xa0, 0xd5, 0x6f, 0x0e, 0xbd, 0xd3, 0xa3, 0x75, 0x05, 0xec, 0x65, 0xf4, 0x0b,
	0x32, 0xae, 0x84, 0x2e, 0xe7, 0x61, 0x4d, 0x3f, 0xfc, 0x0e, 0xbc, 0x15, 0xd8, 0x28, 0x4f, 0xd9,
	0xbc, 0xee, 0xd7, 0x84, 0xe4, 0x23, 0x68, 0xcd, 0x68, 0x56, 0xd9, 0x8e, 0xdd, 0xd0, 0x26, 0xdf,
	0x37, 0xce, 0x9c, 0xc1, 0x9f, 0x4d, 0xe8, 0xd4, 0xad, 0x91, 0x63, 0xf0, 0x73, 0xa6, 0x14, 0x4d,
	0x59, 0xa4, 0xe7, 0x05, 0xab, 0x05, 0xbc, 0x1a, 0x7b, 0x98, 0x17, 0xcc, 0x08, 0x69, 0x59, 0xf0,
	0x78, 0x29, 0x84, 0x89, 0xf1, 0xa3, 0x4a, 0xb8, 0x1d, 0xdc, 0x0d, 0x31, 0x26, 0x3f, 0x82, 0x4f,
	0x2b, 0x3d, 0x61, 0x42, 0xf3, 0x98, 0x6a, 0x86, 0x73, 0x7a, 0xa7, 0x87, 0xeb, 0x23, 0x9d, 0xaf,
	0x30, 0xc2, 0x35, 0x3e, 0xf9, 0x01, 0x7c, 0x2d, 0xa7, 0x4c, 0x44, 0x55, 0x91, 0x98, 0xef, 0x5b,
	0xf8, 0xfd, 0x27, 0xeb, 0xdf, 0x3f, 0x18, 0xc6, 0xaf, 0x48, 0x08, 0x3d, 0xfd, 0x9c, 0x90, 0xcf,
	0x61, 0x9f, 0x89, 0x52, 0x66, 0x59, 0xce, 0x84, 0x8e, 0x78, 0x12, 0xb4, 0xb1, 0x35, 0xff, 0x19,
	0xbc, 0x4e, 0xc8, 0x1d, 0x7c, 0x98, 0x32, 0x1d, 0x8d, 0xa5, 0xd4, 0x4a, 0x97, 0xb4, 0x88, 0x50,
	0x21, 0xe8, 0x60, 0xa5, 0x0d, 0xf3, 0x7f, 0x62, 0xfa, 0x62, 0xc9, 0xc3, 0xaa, 0xe1, 0x41, 0xba,
	0x09, 0x19, 0x41, 0xb5, 0x43, 0x70, 0x6f, 0x97, 0xe0, 0xfd, 0xb6, 0xa0, 0xda, 0x84, 0x06, 0x7f,
	0x37, 0xc0, 0x5f, 0xf5, 0x88, 0x7c, 0x06, 0x20, 0x55, 0x34, 0x63, 0xa5, 0xe2, 0x52, 0xd4, 0x0b,
	0x72, 0xa5, 0xfa, 0xcd, 0x02, 0x66, 0xec, 0x71, 0xc5, 0xb3, 0xe4, 0x89, 0x61, 0xd7, 0xe4, 0x23,
	0xb8, 0x24, 0x1d, 0x83, 0x5f, 0x94, 0x32, 0xa9, 0x62, 0x1d, 0x09, 0x9a, 0xb3, 0x7a, 0x6b, 0x5e,
	0x8d, 0xdd, 0xd2, 0x1c, 0xed, 0x53, 0xac, 0xe4, 0x34, 0x8b, 0x44, 0x95, 0x8f, 0x59, 0x89, 0xdb,
	0x73, 0x43, 0xdf, 0x82, 0xb7, 0x88, 0x99, 0xad, 0xf3, 0x9c, 0x71, 0xdc, 0x8c, 0x1b, 0x62, 0x6c,
	0xb0, 0x9c, 0x3d, 0xd9, 0x8d, 0x31, 0x39, 0x02, 0x2f, 0x61, 0x33, 0x1e, 0x33, 0x5b, 0xae, 0x83,
	0x4f, 0x60, 0x21, 0xac, 0xf6, 0x29, 0xb8, 0xf1, 0x84, 0x66, 0x19, 0x13, 0x29, 0x43, 0xb3, 0xfc,
	0xf0, 0x19, 0x30, 0x27, 0x97, 0xcb, 0x84, 0x65, 0x81, 0x6b, 0x4f, 0x0e, 0x13, 0x63, 0x04, 0x06,
	0x56, 0x13, 0xac, 0x11, 0x88, 0x18, 0xc9, 0xc1, 0x5f, 0x0d, 0xf0, 0x56, 0x8e, 0xc3, 0xde, 0xad,
	0xd9, 0x85, 0x83, 0xf2, 0x36, 0x31, 0x22, 0x45, 0xa5, 0x26, 0x51, 0x4e, 0xd3, 0xa7, 0x93, 0x76,
	0x0d, 0x72, 0x63, 0x00, 0x63, 0x54, 0x25, 0x32, 0x19, 0x4f, 0xeb, 0x3d, 0x36, 0xf1, 0x5b, 0xcf,
	0x62, 0x76, 0xe3, 0xdf, 0xc0, 0x3b, 0xfa, 0x48, 0xb9, 0xe6, 0x22, 0x8d, 0x62, 0x29, 0x7e, 0xe7,
	0x69, 0x55, 0x52, 0x6d, 0x9c, 0x37, 0x8e, 0xed, 0x85, 0x6f, 0x97, 0xaf, 0x97, 0xab, 0x8f, 0xe4,
	0x63, 0xe8, 0x54, 0x8a, 0x95, 0xe6, 0x30, 0xad, 0x7b, 0x6d, 0x93, 0x5e, 0x27, 0xe4, 0x04, 0xba,
	0xf8, 0x90, 0x49, 0x91, 0xda, 0xd1, 0xea, 0xc3, 0x35, 0xe8, 0xcf, 0x52, 0xa4, 0x68, 0xd8, 0x17,
	0xf0, 0x1a, 0x59, 0x6a, 0x22, 0x4b, 0xbd, 0xea, 0xea, 0xbe, 0x81, 0xef, 0x0d, 0x8a, 0xbc, 0x13,
	0xe8, 0x0a, 0xa9, 0x23, 0x29, 0x4c, 0x6f, 0x4a, 0x66, 0xd6, 0xdd, 0xbd, 0xd0, 0x17, 0x52, 0xdf,
	0x89, 0x4b, 0x8b, 0x0d, 0x6e, 0xe0, 0x60, 0xeb, 0xba, 0xc9, 0x19, 0x04, 0x69, 0xf4, 0xc2, 0x68,
	0x0e, 0x8a, 0xbc, 0x4b, 0xcf, 0x77, 0xcd, 0x36, 0x98, 0xc1, 0xc1, 0xd6, 0x6d, 0x93, 0x2f, 0xe1,
	0xf5, 0xe6, 0x5f, 0x61, 0x37, 0xd1, 0x1d, 0x6f, 0xd5, 0x55, 0x2f, 0xd5, 0x6d, 0xd8, 0xba, 0x6a,
	0x67, 0xdd, 0x8b, 0x37, 0xff, 0x2c, 0x7a, 0xce, 0xbf, 0x8b, 0x9e, 0xf3, 0xdf, 0xa2, 0xe7, 0xfc,
	0xf1, 0x7f, 0xef, 0x83, 0x71, 0x1b, 0xff, 0xb4, 0xaf, 0xdf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4a,
	0xdb, 0x6d, 0x37, 0xe6, 0x05, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCheckin(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCheckin(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCheckin(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x22
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintCheckin(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SetBootstrapToken != nil {
		{
			size, err := m.SetBootstrapToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.GetBootstrapToken != nil {
		{
			size, err := m.GetBootstrapToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EnrollmentId) > 0 {
		i -= len(m.EnrollmentId)
		copy(dAtA[i:], m.EnrollmentId)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.EnrollmentId)))
		i--
		dAtA[i] = 0x32
	}
	if m.TokenUpdate != nil {
		{
			size, err := m.TokenUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Authenticate != nil {
		{
			size, err := m.Authenticate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Udid) > 0 {
		i -= len(m.Udid)
		copy(dAtA[i:], m.Udid)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Udid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Authenticate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authenticate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authenticate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Meid) > 0 {
		i -= len(m.Meid)
		copy(dAtA[i:], m.Meid)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Meid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuildVersion) > 0 {
		i -= len(m.BuildVersion)
		copy(dAtA[i:], m.BuildVersion)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.BuildVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OsVersion) > 0 {
		i -= len(m.OsVersion)
		copy(dAtA[i:], m.OsVersion)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.OsVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotOnConsole {
		i--
		if m.NotOnConsole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserShortName) > 0 {
		i -= len(m.UserShortName)
		copy(dAtA[i:], m.UserShortName)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.UserShortName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserLongName) > 0 {
		i -= len(m.UserLongName)
		copy(dAtA[i:], m.UserLongName)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.UserLongName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AwaitingConfiguration {
		i--
		if m.AwaitingConfiguration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.UnlockToken) > 0 {
		i -= len(m.UnlockToken)
		copy(dAtA[i:], m.UnlockToken)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.UnlockToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PushMagic) > 0 {
		i -= len(m.PushMagic)
		copy(dAtA[i:], m.PushMagic)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.PushMagic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBootstrapToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBootstrapToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBootstrapToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GAwaitingConfiguration {
		i--
		if m.GAwaitingConfiguration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetBootstrapToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBootstrapToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBootstrapToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SAwaitingConfiguration {
		i--
		if m.SAwaitingConfiguration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BootstrapToken) > 0 {
		i -= len(m.BootstrapToken)
		copy(dAtA[i:], m.BootstrapToken)
		i = encodeVarintCheckin(dAtA, i, uint64(len(m.BootstrapToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCheckin(dAtA []byte, offset int, v uint64) int {
	offset -= sovCheckin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovCheckin(uint64(m.Time))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCheckin(uint64(len(k))) + 1 + len(v) + sovCheckin(uint64(len(v)))
			n += mapEntrySize + 1 + sovCheckin(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.Authenticate != nil {
		l = m.Authenticate.Size()
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.TokenUpdate != nil {
		l = m.TokenUpdate.Size()
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.EnrollmentId)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.GetBootstrapToken != nil {
		l = m.GetBootstrapToken.Size()
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.SetBootstrapToken != nil {
		l = m.SetBootstrapToken.Size()
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authenticate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.BuildVersion)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Meid)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.PushMagic)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.UnlockToken)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.AwaitingConfiguration {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.UserLongName)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	l = len(m.UserShortName)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.NotOnConsole {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBootstrapToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GAwaitingConfiguration {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBootstrapToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BootstrapToken)
	if l > 0 {
		n += 1 + l + sovCheckin(uint64(l))
	}
	if m.SAwaitingConfiguration {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCheckin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheckin(x uint64) (n int) {
	return sovCheckin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheckin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheckin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCheckin
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCheckin
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheckin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCheckin
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCheckin
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCheckin(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCheckin
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authenticate == nil {
				m.Authenticate = &Authenticate{}
			}
			if err := m.Authenticate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenUpdate == nil {
				m.TokenUpdate = &TokenUpdate{}
			}
			if err := m.TokenUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrollmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetBootstrapToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetBootstrapToken == nil {
				m.GetBootstrapToken = &GetBootstrapToken{}
			}
			if err := m.GetBootstrapToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBootstrapToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetBootstrapToken == nil {
				m.SetBootstrapToken = &SetBootstrapToken{}
			}
			if err := m.SetBootstrapToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authenticate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authenticate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authenticate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushMagic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushMagic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockToken = append(m.UnlockToken[:0], dAtA[iNdEx:postIndex]...)
			if m.UnlockToken == nil {
				m.UnlockToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitingConfiguration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitingConfiguration = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLongName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserLongName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotOnConsole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotOnConsole = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBootstrapToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBootstrapToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBootstrapToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GAwaitingConfiguration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GAwaitingConfiguration = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBootstrapToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBootstrapToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBootstrapToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapToken = append(m.BootstrapToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BootstrapToken == nil {
				m.BootstrapToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SAwaitingConfiguration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SAwaitingConfiguration = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCheckin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCheckin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCheckin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCheckin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCheckin = fmt.Errorf("proto: unexpected end of group")
)
